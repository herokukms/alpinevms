; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31332.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_08HGBNAEPD@?1healthz@			; `string'
PUBLIC	??_C@_03JLOMOCCD@OK?6@				; `string'
;	COMDAT ??_C@_03JLOMOCCD@OK?6@
CONST	SEGMENT
??_C@_03JLOMOCCD@OK?6@ DB 'OK', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGBNAEPD@?1healthz@
CONST	SEGMENT
??_C@_08HGBNAEPD@?1healthz@ DB '/healthz', 00H		; `string'
PUBLIC	handle_web
PUBLIC	mongooseThread
;	COMDAT pdata
pdata	SEGMENT
$pdata$handle_web DD imagerel $LN9
	DD	imagerel $LN9+79
	DD	imagerel $unwind$handle_web
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mongooseThread DD imagerel $LN9
	DD	imagerel $LN9+24
	DD	imagerel $unwind$mongooseThread
;	COMDAT xdata
xdata	SEGMENT
$unwind$mongooseThread DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$handle_web DD 020a01H
	DD	03006320aH
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\web.c
;	COMDAT mongooseThread
_TEXT	SEGMENT
arg$ = 48
mongooseThread PROC					; COMDAT

; 4    : {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
$LL2@mongooseTh:

; 5    :   struct mg_mgr *mgr = (struct mg_mgr *)arg;
; 6    :   for (;;)
; 7    :     mg_mgr_poll(mgr, 1000); // Infinite event loop

  00009	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  0000e	48 8b cb	 mov	 rcx, rbx
  00011	e8 00 00 00 00	 call	 mg_mgr_poll
  00016	eb f1		 jmp	 SHORT $LL2@mongooseTh
mongooseThread ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\web.c
;	COMDAT handle_web
_TEXT	SEGMENT
c$ = 48
ev$ = 56
ev_data$ = 64
handle_web PROC						; COMDAT

; 12   : {

$LN9:

; 13   :   if (ev == MG_EV_HTTP_MSG)

  00000	83 fa 0a	 cmp	 edx, 10
  00003	75 49		 jne	 SHORT $LN6@handle_web
  00005	53		 push	 rbx
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 12   : {

  0000a	48 8b d9	 mov	 rbx, rcx

; 14   :   {
; 15   :     // The MG_EV_HTTP_MSG event means HTTP request. `hm` holds parsed request,
; 16   :     // see https://mongoose.ws/documentation/#struct-mg_http_message
; 17   :     struct mg_http_message *hm = (struct mg_http_message *)ev_data;
; 18   : 
; 19   :     // If request is /healthz, return 200 OK with a message in the body
; 20   :     if (mg_http_match_uri(hm, "/healthz"))

  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08HGBNAEPD@?1healthz@
  00014	49 8b c8	 mov	 rcx, r8
  00017	e8 00 00 00 00	 call	 mg_http_match_uri
  0001c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@@
  00023	48 8b cb	 mov	 rcx, rbx
  00026	84 c0		 test	 al, al
  00028	74 0e		 je	 SHORT $LN3@handle_web

; 21   :     {
; 22   :       mg_http_reply(c, 200, "", "OK\n");

  0002a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_03JLOMOCCD@OK?6@
  00031	ba c8 00 00 00	 mov	 edx, 200		; 000000c8H

; 23   :     }

  00036	eb 0c		 jmp	 SHORT $LN7@handle_web
$LN3@handle_web:

; 24   :     else
; 25   :     {
; 26   :       mg_http_reply(c, 404, "", "Not found\n");

  00038	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0L@CKKNHDCB@Not?5found?6@
  0003f	ba 94 01 00 00	 mov	 edx, 404		; 00000194H
$LN7@handle_web:

; 27   :     }
; 28   :   }
; 29   : }

  00044	e8 00 00 00 00	 call	 mg_http_reply
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5b		 pop	 rbx
$LN6@handle_web:
  0004e	c3		 ret	 0
handle_web ENDP
_TEXT	ENDS
END
