; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31332.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	optind
PUBLIC	??_C@_02BAABKJLB@?9?9@				; `string'
COMM	optarg:QWORD
_DATA	ENDS
;	COMDAT ??_C@_02BAABKJLB@?9?9@
CONST	SEGMENT
??_C@_02BAABKJLB@?9?9@ DB '--', 00H			; `string'
	ORG $+1
optind	DD	01H
PUBLIC	getopt
;	COMDAT pdata
pdata	SEGMENT
$pdata$getopt DD imagerel $LN21
	DD	imagerel $LN21+364
	DD	imagerel $unwind$getopt
;	COMDAT xdata
xdata	SEGMENT
$unwind$getopt DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
?sp@?1??getopt@@9@9 DD 01H				; `getopt'::`2'::sp
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\wingetopt.c
;	COMDAT getopt
_TEXT	SEGMENT
argc$dead$ = 48
argv$dead$ = 56
opts$dead$ = 64
getopt	PROC						; COMDAT

; 33   : {

$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 34   : 	static int sp = 1;
; 35   : 	register int c;
; 36   : 	register char *cp;
; 37   : 
; 38   : 	if (sp == 1)

  00014	4c 63 05 00 00
	00 00		 movsxd	 r8, DWORD PTR ?sp@?1??getopt@@9@9
  0001b	bd 01 00 00 00	 mov	 ebp, 1
  00020	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR global_argv
  00027	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR global_argc
  0002d	48 63 15 00 00
	00 00		 movsxd	 rdx, DWORD PTR optind
  00034	44 3b c5	 cmp	 r8d, ebp
  00037	75 33		 jne	 SHORT $LN6@getopt

; 39   : 		if (optind >= argc ||
; 40   : 			argv[optind][0] != '-' || argv[optind][1] == '\0')

  00039	3b d6		 cmp	 edx, esi
  0003b	7d 27		 jge	 SHORT $LN5@getopt
  0003d	48 8b 0c d3	 mov	 rcx, QWORD PTR [rbx+rdx*8]
  00041	b0 2d		 mov	 al, 45			; 0000002dH
  00043	38 01		 cmp	 BYTE PTR [rcx], al
  00045	75 1d		 jne	 SHORT $LN5@getopt
  00047	80 79 01 00	 cmp	 BYTE PTR [rcx+1], 0
  0004b	74 17		 je	 SHORT $LN5@getopt

; 41   : 			return(EOF);
; 42   : 		else if (strcmp(argv[optind], "--") == 0) {

  0004d	38 01		 cmp	 BYTE PTR [rcx], al
  0004f	75 1b		 jne	 SHORT $LN6@getopt
  00051	38 41 01	 cmp	 BYTE PTR [rcx+1], al
  00054	75 16		 jne	 SHORT $LN6@getopt
  00056	80 79 02 00	 cmp	 BYTE PTR [rcx+2], 0
  0005a	75 10		 jne	 SHORT $LN6@getopt

; 43   : 			optind++;

  0005c	03 d5		 add	 edx, ebp
  0005e	89 15 00 00 00
	00		 mov	 DWORD PTR optind, edx
$LN5@getopt:

; 75   : }

  00064	83 c8 ff	 or	 eax, -1
  00067	e9 eb 00 00 00	 jmp	 $LN1@getopt
$LN6@getopt:

; 44   : 			return(EOF);
; 45   : 		}
; 46   : 		optopt = c = argv[optind][sp];

  0006c	48 8b 04 d3	 mov	 rax, QWORD PTR [rbx+rdx*8]
  00070	42 0f be 3c 00	 movsx	 edi, BYTE PTR [rax+r8]

; 47   : 		if (c == ':' || (cp = strchr(opts, c)) == NULL) {

  00075	83 ff 3a	 cmp	 edi, 58			; 0000003aH
  00078	0f 84 ac 00 00
	00		 je	 $LN8@getopt
  0007e	8b d7		 mov	 edx, edi
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EJ@OGPMLMGM@a?3N?3B?3m?3t?3A?3R?3u?3g?3L?3p?3i?3H?3P?3X?3Y@
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0008d	48 85 c0	 test	 rax, rax
  00090	0f 84 87 00 00
	00		 je	 $LN18@getopt

; 51   : 				sp = 1;
; 52   : 			}
; 53   : 			return('?');
; 54   : 		}
; 55   : 		if (*++cp == ':') {

  00096	80 78 01 3a	 cmp	 BYTE PTR [rax+1], 58	; 0000003aH
  0009a	4c 63 05 00 00
	00 00		 movsxd	 r8, DWORD PTR optind
  000a1	75 42		 jne	 SHORT $LN10@getopt

; 56   : 			if (argv[optind][sp + 1] != '\0')

  000a3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?sp@?1??getopt@@9@9
  000a9	4a 8b 14 c3	 mov	 rdx, QWORD PTR [rbx+r8*8]
  000ad	ff c0		 inc	 eax
  000af	48 63 c8	 movsxd	 rcx, eax
  000b2	48 03 d1	 add	 rdx, rcx
  000b5	80 3a 00	 cmp	 BYTE PTR [rdx], 0
  000b8	74 06		 je	 SHORT $LN12@getopt

; 57   : 				optarg = (char*)&argv[optind++][sp + 1];

  000ba	41 8d 48 01	 lea	 ecx, DWORD PTR [r8+1]
  000be	eb 17		 jmp	 SHORT $LN15@getopt
$LN12@getopt:

; 58   : 			else if (++optind >= argc) {

  000c0	41 8d 40 01	 lea	 eax, DWORD PTR [r8+1]
  000c4	89 05 00 00 00
	00		 mov	 DWORD PTR optind, eax
  000ca	3b c6		 cmp	 eax, esi
  000cc	7d 7e		 jge	 SHORT $LN19@getopt

; 59   : 				//ERR(": option requires an argument -- ", (char)c);
; 60   : 				sp = 1;
; 61   : 				return('?');
; 62   : 			}
; 63   : 			else
; 64   : 				optarg = (char*)argv[optind++];

  000ce	8d 48 01	 lea	 ecx, DWORD PTR [rax+1]
  000d1	48 98		 cdqe
  000d3	48 8b 14 c3	 mov	 rdx, QWORD PTR [rbx+rax*8]
$LN15@getopt:

; 65   : 			sp = 1;

  000d7	89 0d 00 00 00
	00		 mov	 DWORD PTR optind, ecx
  000dd	89 2d 00 00 00
	00		 mov	 DWORD PTR ?sp@?1??getopt@@9@9, ebp

; 66   : 		}

  000e3	eb 2d		 jmp	 SHORT $LN11@getopt
$LN10@getopt:

; 67   : 		else {
; 68   : 			if (argv[optind][++sp] == '\0') {

  000e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sp@?1??getopt@@9@9
  000eb	4a 8b 0c c3	 mov	 rcx, QWORD PTR [rbx+r8*8]
  000ef	03 d5		 add	 edx, ebp
  000f1	89 15 00 00 00
	00		 mov	 DWORD PTR ?sp@?1??getopt@@9@9, edx
  000f7	48 63 d2	 movsxd	 rdx, edx
  000fa	80 3c 0a 00	 cmp	 BYTE PTR [rdx+rcx], 0
  000fe	75 10		 jne	 SHORT $LN16@getopt

; 69   : 				sp = 1;
; 70   : 				optind++;

  00100	44 03 c5	 add	 r8d, ebp
  00103	89 2d 00 00 00
	00		 mov	 DWORD PTR ?sp@?1??getopt@@9@9, ebp
  00109	44 89 05 00 00
	00 00		 mov	 DWORD PTR optind, r8d
$LN16@getopt:

; 71   : 			}
; 72   : 			optarg = NULL;

  00110	33 d2		 xor	 edx, edx
$LN11@getopt:

; 73   : 		}
; 74   : 		return(c);

  00112	48 89 15 00 00
	00 00		 mov	 QWORD PTR optarg, rdx
  00119	8b c7		 mov	 eax, edi
  0011b	eb 3a		 jmp	 SHORT $LN1@getopt
$LN18@getopt:

; 47   : 		if (c == ':' || (cp = strchr(opts, c)) == NULL) {

  0011d	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?sp@?1??getopt@@9@9
  00124	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR optind
$LN8@getopt:

; 48   : 			//ERR(": illegal option -- ", (char)c);
; 49   : 			if (argv[optind][++sp] == '\0') {

  0012a	44 03 c5	 add	 r8d, ebp
  0012d	48 63 c2	 movsxd	 rax, edx
  00130	49 63 c8	 movsxd	 rcx, r8d
  00133	44 89 05 00 00
	00 00		 mov	 DWORD PTR ?sp@?1??getopt@@9@9, r8d
  0013a	48 8b 04 c3	 mov	 rax, QWORD PTR [rbx+rax*8]
  0013e	80 3c 01 00	 cmp	 BYTE PTR [rcx+rax], 0
  00142	75 0e		 jne	 SHORT $LN9@getopt

; 50   : 				optind++;

  00144	03 d5		 add	 edx, ebp
  00146	89 15 00 00 00
	00		 mov	 DWORD PTR optind, edx
$LN19@getopt:

; 75   : }

  0014c	89 2d 00 00 00
	00		 mov	 DWORD PTR ?sp@?1??getopt@@9@9, ebp
$LN9@getopt:
  00152	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
$LN1@getopt:
  00157	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0015c	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00161	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00166	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0016a	5f		 pop	 rdi
  0016b	c3		 ret	 0
getopt	ENDP
_TEXT	ENDS
END
