; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31332.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_01MCMALHOG@a@				; `string'
PUBLIC	??_C@_0O@LNENHMIM@?$CFY?9?$CFm?9?$CFd?5?$CFX?3?5@ ; `string'
PUBLIC	??_C@_0L@NFCOGLDB@Unlicensed@			; `string'
PUBLIC	??_C@_08BMJGAJHF@Licensed@			; `string'
PUBLIC	??_C@_09JBIIANMO@OOB?5grace@			; `string'
PUBLIC	??_C@_09CLFMDFGC@OOT?5grace@			; `string'
PUBLIC	??_C@_0M@MHDDAGNF@Non?9Genuine@			; `string'
PUBLIC	??_C@_0N@OFINCEFP@Notification@			; `string'
PUBLIC	??_C@_0P@NCPOCFCF@Extended?5grace@		; `string'
PUBLIC	??_C@_0BN@LENFACPA@?$CF08x?9?$CF04x?9?$CF04x?9?$CF04x?9?$CF012I64x@ ; `string'
PUBLIC	??_C@_0CJ@KEHOAAGG@Protocol?5version?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_03CCLAEDDF@Yes@				; `string'
PUBLIC	??_C@_02JINPPBEP@No@				; `string'
PUBLIC	??_C@_0CG@CIJPHHEF@Client?5is?5a?5virtual?5machine?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CL@NILKFNNP@Licensing?5status?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CO@GGDJLANK@Remaining?5time?5?$CI0?5?$DN?5forever?$CJ?5?5?5@ ; `string'
PUBLIC	??_C@_0CL@KHCLANPB@Application?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CL@LLNJLCF@SKU?5ID?5?$CIaka?5Activation?5ID?$CJ?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CL@MNFHGDHP@KMS?5ID?5?$CIaka?5KMS?5counted?5ID?$CJ?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CG@NAJADCGN@Client?5machine?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CG@KNAHJFGH@Previous?5client?5machine?5ID?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0M@EHAPGNAC@?$CFY?9?$CFm?9?$CFd?5?$CFX@	; `string'
PUBLIC	??_C@_0CG@CCLOIHMC@Client?5request?5timestamp?5?$CIUTC?$CJ?5@ ; `string'
PUBLIC	??_C@_0CG@DFLAPOPH@Client?5IP?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CG@NJMNAEGJ@Workstation?5name?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CG@KONHMDAE@N?5count?5policy?5?$CIminimum?5clients@ ; `string'
PUBLIC	??_C@_0CG@CKMBAHPA@KMS?5host?5extended?5PID?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CM@BGLDHKHD@KMS?5host?5Hardware?5ID?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CG@CKOEJNCP@KMS?5host?5current?5active?5clients@ ; `string'
PUBLIC	??_C@_0CG@HGDBGCN@Renewal?5interval?5policy?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CG@EIDEKNCG@Activation?5interval?5policy?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CD@FAKKKCEM@Compiler?3?5VC?$CL?$CL?5?$CF02i?4?$CF02i?5build?5@ ; `string'
PUBLIC	??_C@_0O@KEGGAHLA@little?9endian@		; `string'
PUBLIC	??_C@_0L@JIMEFGOI@big?9endian@			; `string'
PUBLIC	??_C@_0BI@LFPGKPOF@?5Intel?5x86_64?5Windows64@	; `string'
PUBLIC	??_C@_0BJ@MBJNOFCM@Intended?5platform?3?$CFs?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BB@NGPJLHEC@?5_CRYPTO_WINDOWS@		; `string'
PUBLIC	??_C@_0BB@NGBEHLG@Common?5flags?3?$CFs?6@	; `string'
PUBLIC	??_C@_0P@JPKAPDJG@?5DNS_PARSER?$DNOS@		; `string'
PUBLIC	??_C@_0BA@KMEDHNGP@vlmcs?5flags?3?$CFs?6@	; `string'
PUBLIC	??_C@_0CO@DNHMBJJK@?5NO_SIGHUP?5THREADS?$DN1?5SUPPORT_WI@ ; `string'
PUBLIC	??_C@_0BB@OGOEBGIP@vlmcsd?5flags?3?$CFs?6@	; `string'
EXTRN	__imp__localtime64:PROC
EXTRN	__imp_strftime:PROC
;	COMDAT ??_C@_0BB@OGOEBGIP@vlmcsd?5flags?3?$CFs?6@
CONST	SEGMENT
??_C@_0BB@OGOEBGIP@vlmcsd?5flags?3?$CFs?6@ DB 'vlmcsd flags:%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DNHMBJJK@?5NO_SIGHUP?5THREADS?$DN1?5SUPPORT_WI@
CONST	SEGMENT
??_C@_0CO@DNHMBJJK@?5NO_SIGHUP?5THREADS?$DN1?5SUPPORT_WI@ DB ' NO_SIGHUP '
	DB	'THREADS=1 SUPPORT_WINE NO_FREEBIND', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KMEDHNGP@vlmcs?5flags?3?$CFs?6@
CONST	SEGMENT
??_C@_0BA@KMEDHNGP@vlmcs?5flags?3?$CFs?6@ DB 'vlmcs flags:%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JPKAPDJG@?5DNS_PARSER?$DNOS@
CONST	SEGMENT
??_C@_0P@JPKAPDJG@?5DNS_PARSER?$DNOS@ DB ' DNS_PARSER=OS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NGBEHLG@Common?5flags?3?$CFs?6@
CONST	SEGMENT
??_C@_0BB@NGBEHLG@Common?5flags?3?$CFs?6@ DB 'Common flags:%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NGPJLHEC@?5_CRYPTO_WINDOWS@
CONST	SEGMENT
??_C@_0BB@NGPJLHEC@?5_CRYPTO_WINDOWS@ DB ' _CRYPTO_WINDOWS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MBJNOFCM@Intended?5platform?3?$CFs?5?$CFs?6@
CONST	SEGMENT
??_C@_0BJ@MBJNOFCM@Intended?5platform?3?$CFs?5?$CFs?6@ DB 'Intended platf'
	DB	'orm:%s %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LFPGKPOF@?5Intel?5x86_64?5Windows64@
CONST	SEGMENT
??_C@_0BI@LFPGKPOF@?5Intel?5x86_64?5Windows64@ DB ' Intel x86_64 Windows6'
	DB	'4', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIMEFGOI@big?9endian@
CONST	SEGMENT
??_C@_0L@JIMEFGOI@big?9endian@ DB 'big-endian', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KEGGAHLA@little?9endian@
CONST	SEGMENT
??_C@_0O@KEGGAHLA@little?9endian@ DB 'little-endian', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FAKKKCEM@Compiler?3?5VC?$CL?$CL?5?$CF02i?4?$CF02i?5build?5@
CONST	SEGMENT
??_C@_0CD@FAKKKCEM@Compiler?3?5VC?$CL?$CL?5?$CF02i?4?$CF02i?5build?5@ DB 'C'
	DB	'ompiler: VC++ %02i.%02i build %i', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EIDEKNCG@Activation?5interval?5policy?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@EIDEKNCG@Activation?5interval?5policy?5?5?5?5?5@ DB 'Activation'
	DB	' interval policy      : %u', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HGDBGCN@Renewal?5interval?5policy?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@HGDBGCN@Renewal?5interval?5policy?5?5?5?5?5?5?5?5@ DB 'Renewal '
	DB	'interval policy         : %u', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CKOEJNCP@KMS?5host?5current?5active?5clients@
CONST	SEGMENT
??_C@_0CG@CKOEJNCP@KMS?5host?5current?5active?5clients@ DB 'KMS host curr'
	DB	'ent active clients : %u', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BGLDHKHD@KMS?5host?5Hardware?5ID?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CM@BGLDHKHD@KMS?5host?5Hardware?5ID?5?5?5?5?5?5?5?5?5?5?5@ DB 'KMS'
	DB	' host Hardware ID            : %016I64X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CKMBAHPA@KMS?5host?5extended?5PID?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@CKMBAHPA@KMS?5host?5extended?5PID?5?5?5?5?5?5?5?5?5?5@ DB 'KMS '
	DB	'host extended PID           : %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KONHMDAE@N?5count?5policy?5?$CIminimum?5clients@
CONST	SEGMENT
??_C@_0CG@KONHMDAE@N?5count?5policy?5?$CIminimum?5clients@ DB 'N count po'
	DB	'licy (minimum clients): %u', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NJMNAEGJ@Workstation?5name?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@NJMNAEGJ@Workstation?5name?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'W'
	DB	'orkstation name                : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DFLAPOPH@Client?5IP?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@DFLAPOPH@Client?5IP?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'C'
	DB	'lient IP                       : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CCLOIHMC@Client?5request?5timestamp?5?$CIUTC?$CJ?5@
CONST	SEGMENT
??_C@_0CG@CCLOIHMC@Client?5request?5timestamp?5?$CIUTC?$CJ?5@ DB 'Client '
	DB	'request timestamp (UTC)  : %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EHAPGNAC@?$CFY?9?$CFm?9?$CFd?5?$CFX@
CONST	SEGMENT
??_C@_0M@EHAPGNAC@?$CFY?9?$CFm?9?$CFd?5?$CFX@ DB '%Y-%m-%d %X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KNAHJFGH@Previous?5client?5machine?5ID?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@KNAHJFGH@Previous?5client?5machine?5ID?5?5?5?5?5@ DB 'Previous '
	DB	'client machine ID      : %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NAJADCGN@Client?5machine?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@NAJADCGN@Client?5machine?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'C'
	DB	'lient machine ID               : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MNFHGDHP@KMS?5ID?5?$CIaka?5KMS?5counted?5ID?$CJ?5?5?5?5@
CONST	SEGMENT
??_C@_0CL@MNFHGDHP@KMS?5ID?5?$CIaka?5KMS?5counted?5ID?$CJ?5?5?5?5@ DB 'KM'
	DB	'S ID (aka KMS counted ID)     : %s (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LLNJLCF@SKU?5ID?5?$CIaka?5Activation?5ID?$CJ?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CL@LLNJLCF@SKU?5ID?5?$CIaka?5Activation?5ID?$CJ?5?5?5?5?5@ DB 'SKU'
	DB	' ID (aka Activation ID)      : %s (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KHCLANPB@Application?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CL@KHCLANPB@Application?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'A'
	DB	'pplication ID                  : %s (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GGDJLANK@Remaining?5time?5?$CI0?5?$DN?5forever?$CJ?5?5?5@
CONST	SEGMENT
??_C@_0CO@GGDJLANK@Remaining?5time?5?$CI0?5?$DN?5forever?$CJ?5?5?5@ DB 'R'
	DB	'emaining time (0 = forever)    : %i minutes', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NILKFNNP@Licensing?5status?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CL@NILKFNNP@Licensing?5status?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'L'
	DB	'icensing status                : %u (%s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CIJPHHEF@Client?5is?5a?5virtual?5machine?5?5?5?5@
CONST	SEGMENT
??_C@_0CG@CIJPHHEF@Client?5is?5a?5virtual?5machine?5?5?5?5@ DB 'Client is'
	DB	' a virtual machine     : %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JINPPBEP@No@
CONST	SEGMENT
??_C@_02JINPPBEP@No@ DB 'No', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CCLAEDDF@Yes@
CONST	SEGMENT
??_C@_03CCLAEDDF@Yes@ DB 'Yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KEHOAAGG@Protocol?5version?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CJ@KEHOAAGG@Protocol?5version?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'P'
	DB	'rotocol version                : %u.%u', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LENFACPA@?$CF08x?9?$CF04x?9?$CF04x?9?$CF04x?9?$CF012I64x@
CONST	SEGMENT
??_C@_0BN@LENFACPA@?$CF08x?9?$CF04x?9?$CF04x?9?$CF04x?9?$CF012I64x@ DB '%'
	DB	'08x-%04x-%04x-%04x-%012I64x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NCPOCFCF@Extended?5grace@
CONST	SEGMENT
??_C@_0P@NCPOCFCF@Extended?5grace@ DB 'Extended grace', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OFINCEFP@Notification@
CONST	SEGMENT
??_C@_0N@OFINCEFP@Notification@ DB 'Notification', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MHDDAGNF@Non?9Genuine@
CONST	SEGMENT
??_C@_0M@MHDDAGNF@Non?9Genuine@ DB 'Non-Genuine', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CLFMDFGC@OOT?5grace@
CONST	SEGMENT
??_C@_09CLFMDFGC@OOT?5grace@ DB 'OOT grace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JBIIANMO@OOB?5grace@
CONST	SEGMENT
??_C@_09JBIIANMO@OOB?5grace@ DB 'OOB grace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BMJGAJHF@Licensed@
CONST	SEGMENT
??_C@_08BMJGAJHF@Licensed@ DB 'Licensed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NFCOGLDB@Unlicensed@
CONST	SEGMENT
??_C@_0L@NFCOGLDB@Unlicensed@ DB 'Unlicensed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LNENHMIM@?$CFY?9?$CFm?9?$CFd?5?$CFX?3?5@
CONST	SEGMENT
??_C@_0O@LNENHMIM@?$CFY?9?$CFm?9?$CFd?5?$CFX?3?5@ DB '%Y-%m-%d %X: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01MCMALHOG@a@
CONST	SEGMENT
??_C@_01MCMALHOG@a@ DB 'a', 00H				; `string'
LicenseStatusText DQ FLAT:??_C@_0L@NFCOGLDB@Unlicensed@
	DQ	FLAT:??_C@_08BMJGAJHF@Licensed@
	DQ	FLAT:??_C@_09JBIIANMO@OOB?5grace@
	DQ	FLAT:??_C@_09CLFMDFGC@OOT?5grace@
	DQ	FLAT:??_C@_0M@MHDDAGNF@Non?9Genuine@
	DQ	FLAT:??_C@_0N@OFINCEFP@Notification@
	DQ	FLAT:??_C@_0P@NCPOCFCF@Extended?5grace@
PUBLIC	printServerFlags
PUBLIC	printClientFlags
PUBLIC	printCommonFlags
PUBLIC	printPlatform
PUBLIC	fprintf
PUBLIC	vfprintf
PUBLIC	uuid2StringLE
PUBLIC	logRequestVerbose
PUBLIC	logResponseVerbose
PUBLIC	logger
PUBLIC	errorout
PUBLIC	printerrorf
;	COMDAT pdata
pdata	SEGMENT
$pdata$printPlatform DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$printPlatform
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vlogger DD imagerel vlogger
	DD	imagerel vlogger+323
	DD	imagerel $unwind$vlogger
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN6
	DD	imagerel $LN6+68
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vfprintf DD imagerel $LN6
	DD	imagerel $LN6+68
	DD	imagerel $unwind$vfprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$uuid2StringLE DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$uuid2StringLE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$logRequestVerbose DD imagerel $LN12
	DD	imagerel $LN12+623
	DD	imagerel $unwind$logRequestVerbose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$logResponseVerbose DD imagerel $LN9
	DD	imagerel $LN9+300
	DD	imagerel $unwind$logResponseVerbose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$logger DD imagerel $LN4
	DD	imagerel $LN4+39
	DD	imagerel $unwind$logger
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$errorout DD imagerel $LN8
	DD	imagerel $LN8+107
	DD	imagerel $unwind$errorout
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printerrorf DD imagerel $LN11
	DD	imagerel $LN11+161
	DD	imagerel $unwind$printerrorf
;	COMDAT xdata
xdata	SEGMENT
$unwind$printerrorf DD 051c01H
	DD	0e018621cH
	DD	060157016H
	DD	03014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$errorout DD 041a01H
	DD	07016521aH
	DD	030146015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$logger DD 011701H
	DD	04217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$logResponseVerbose DD 071701H
	DD	0156417H
	DD	0143417H
	DD	0120117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$logRequestVerbose DD 071901H
	DD	0323419H
	DD	02c0119H
	DD	0600c700dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$uuid2StringLE DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vfprintf DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 041601H
	DD	070125216H
	DD	030106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vlogger DD 091501H
	DD	010b5415H
	DD	010a3415H
	DD	01060115H
	DD	0700ce00eH
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printPlatform DD 010401H
	DD	04204H
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h
; File C:\Users\dev\source\repos\alpinevms\src\output.c
;	COMDAT printerrorf
_TEXT	SEGMENT
fmt$ = 96
printerrorf PROC					; COMDAT

; 112  : {

$LN11:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00007	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx
  0000b	4c 89 40 18	 mov	 QWORD PTR [rax+24], r8
  0000f	4c 89 48 20	 mov	 QWORD PTR [rax+32], r9
  00013	53		 push	 rbx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	41 56		 push	 r14
  00018	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 113  : 	int error = errno;

  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno

; 114  : 	va_list arglist;
; 115  : 
; 116  : 	va_start(arglist, fmt);
; 117  : 
; 118  : #ifdef IS_LIBRARY
; 119  : 
; 120  : 	size_t len = strlen(ErrorMessage);
; 121  : 	vlmcsd_vsnprintf(ErrorMessage + len, MESSAGE_BUFFER_SIZE - len - 1, fmt, arglist);
; 122  : 
; 123  : #else // !IS_LIBRARY
; 124  : 
; 125  : #ifndef NO_LOG
; 126  : #ifdef _NTSERVICE
; 127  : 	if (InetdMode || IsNTService)

  00022	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR InetdMode, 0
  00029	4c 8d 74 24 68	 lea	 r14, QWORD PTR fmt$[rsp+8]
  0002e	8b 30		 mov	 esi, DWORD PTR [rax]
  00030	75 4e		 jne	 SHORT $LN4@printerror
  00032	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR IsNTService, 0
  00039	75 45		 jne	 SHORT $LN4@printerror

; 132  : 	else
; 133  : #endif // NO_LOG
; 134  : 
; 135  : #endif // IS_LIBRARY
; 136  : 	{
; 137  : 		vfprintf(stderr, fmt, arglist);

  0003b	48 8b 7c 24 60	 mov	 rdi, QWORD PTR fmt$[rsp]
  00040	b9 02 00 00 00	 mov	 ecx, 2
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0004b	48 8b d8	 mov	 rbx, rax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  0004e	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00053	45 33 c9	 xor	 r9d, r9d
  00056	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  0005b	4c 8b c7	 mov	 r8, rdi
  0005e	48 8b d3	 mov	 rdx, rbx
  00061	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 138  : 		fflush(stderr);

  0006a	b9 02 00 00 00	 mov	 ecx, 2
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00075	48 8b c8	 mov	 rcx, rax
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush
  0007e	eb 0d		 jmp	 SHORT $LN3@printerror
$LN4@printerror:

; 128  : #else  // !_NTSERVICE
; 129  : 	if (InetdMode)
; 130  : #endif // NTSERVIICE
; 131  : 		vlogger(fmt, arglist);

  00080	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fmt$[rsp]
  00085	49 8b d6	 mov	 rdx, r14
  00088	e8 00 00 00 00	 call	 vlogger
$LN3@printerror:

; 139  : 	}
; 140  : 
; 141  : 	va_end(arglist);
; 142  : 	errno = error;

  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00093	89 30		 mov	 DWORD PTR [rax], esi

; 143  : 	return 0;

  00095	33 c0		 xor	 eax, eax

; 144  : }

  00097	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009b	41 5e		 pop	 r14
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	5b		 pop	 rbx
  000a0	c3		 ret	 0
printerrorf ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h
; File C:\Users\dev\source\repos\alpinevms\src\output.c
;	COMDAT errorout
_TEXT	SEGMENT
fmt$ = 80
errorout PROC						; COMDAT

; 148  : {

$LN8:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00007	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx
  0000b	4c 89 40 18	 mov	 QWORD PTR [rax+24], r8
  0000f	4c 89 48 20	 mov	 QWORD PTR [rax+32], r9
  00013	53		 push	 rbx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001a	48 8b f9	 mov	 rdi, rcx

; 149  : 	va_list args;
; 150  : 
; 151  : 	va_start(args, fmt);

  0001d	48 8d 70 10	 lea	 rsi, QWORD PTR [rax+16]

; 152  : 	int i = vfprintf(stderr, fmt, args);

  00021	b9 02 00 00 00	 mov	 ecx, 2
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0002c	48 8b d8	 mov	 rbx, rax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  0002f	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00034	45 33 c9	 xor	 r9d, r9d
  00037	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0003c	4c 8b c7	 mov	 r8, rdi
  0003f	48 8b d3	 mov	 rdx, rbx
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 154  : 	fflush(stderr);

  0004b	b9 02 00 00 00	 mov	 ecx, 2
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00050	8b d8		 mov	 ebx, eax
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 154  : 	fflush(stderr);

  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00058	48 8b c8	 mov	 rcx, rax
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 155  : 
; 156  : 	return i;

  00061	8b c3		 mov	 eax, ebx

; 157  : }

  00063	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00067	5f		 pop	 rdi
  00068	5e		 pop	 rsi
  00069	5b		 pop	 rbx
  0006a	c3		 ret	 0
errorout ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\output.c
;	COMDAT logger
_TEXT	SEGMENT
fmt$ = 48
logger	PROC						; COMDAT

; 99   : {

$LN4:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00007	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx
  0000b	4c 89 40 18	 mov	 QWORD PTR [rax+24], r8
  0000f	4c 89 48 20	 mov	 QWORD PTR [rax+32], r9
  00013	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 100  : 	va_list args;
; 101  : 
; 102  : 	va_start(args, fmt);

  00017	48 8d 50 10	 lea	 rdx, QWORD PTR [rax+16]

; 103  : 	vlogger(fmt, args);

  0001b	e8 00 00 00 00	 call	 vlogger

; 104  : 	va_end(args);
; 105  : 	return 0;

  00020	33 c0		 xor	 eax, eax

; 106  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
logger	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Users\dev\source\repos\alpinevms\src\kms.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
; File C:\Users\dev\source\repos\alpinevms\src\kms.c
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
; File C:\Users\dev\source\repos\alpinevms\src\output.c
;	COMDAT logResponseVerbose
_TEXT	SEGMENT
guidBuffer$ = 32
mbstr$ = 80
ePID$ = 160
hwid$ = 168
response$ = 176
p$dead$ = 184
st$ = 184
logResponseVerbose PROC					; COMDAT

; 226  : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000f	57		 push	 rdi
  00010	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00017	49 8b f8	 mov	 rdi, r8
  0001a	48 8b f2	 mov	 rsi, rdx

; 227  : 	char guidBuffer[GUID_STRING_LENGTH + 1];
; 228  : 
; 229  : 	p("Protocol version                : %u.%u\n", (uint32_t)LE16(response->MajorVer), (uint32_t)LE16(response->MinorVer));

  0001d	45 0f b7 00	 movzx	 r8d, WORD PTR [r8]
  00021	48 8b d9	 mov	 rbx, rcx
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@KEHOAAGG@Protocol?5version?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  0002b	0f b7 57 02	 movzx	 edx, WORD PTR [rdi+2]
  0002f	e8 00 00 00 00	 call	 logger

; 230  : 	p("KMS host extended PID           : %s\n", ePID);

  00034	48 8b d3	 mov	 rdx, rbx
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@CKMBAHPA@KMS?5host?5extended?5PID?5?5?5?5?5?5?5?5?5?5@
  0003e	e8 00 00 00 00	 call	 logger

; 231  : 	if (LE16(response->MajorVer) > 5)

  00043	66 83 7f 02 05	 cmp	 WORD PTR [rdi+2], 5
  00048	76 12		 jbe	 SHORT $LN2@logRespons

; 232  : #ifndef _WIN32
; 233  : 		p("KMS host Hardware ID            : %016llX\n", (unsigned long long)BE64(*(uint64_t *)hwid));
; 234  : #else  // _WIN32
; 235  : 		p("KMS host Hardware ID            : %016I64X\n", (unsigned long long)BE64(*(uint64_t *)hwid));

  0004a	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@BGLDHKHD@KMS?5host?5Hardware?5ID?5?5?5?5?5?5?5?5?5?5?5@
  00054	48 0f ca	 bswap	 rdx
  00057	e8 00 00 00 00	 call	 logger
$LN2@logRespons:

; 236  : #endif // WIN32
; 237  : 
; 238  : 	uuid2StringLE(&response->CMID, guidBuffer);

  0005c	48 8d 8f 88 00
	00 00		 lea	 rcx, QWORD PTR [rdi+136]
  00063	48 8d 54 24 20	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00068	e8 00 00 00 00	 call	 uuid2StringLE

; 239  : 	p("Client machine ID               : %s\n", guidBuffer);

  0006d	48 8d 54 24 20	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@NAJADCGN@Client?5machine?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  00079	e8 00 00 00 00	 call	 logger
; File C:\Users\dev\source\repos\alpinevms\src\kms.c

; 164  : 	return GET_UA64LE(ts) / 10000000LL - 11644473600LL;

  0007e	48 b8 bd 42 7a
	e5 d5 94 bf d6	 mov	 rax, -2972493582642298179 ; d6bf94d5e57a42bdH
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  00088	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR st$[rsp]
; File C:\Users\dev\source\repos\alpinevms\src\kms.c

; 164  : 	return GET_UA64LE(ts) / 10000000LL - 11644473600LL;

  00090	48 f7 a7 98 00
	00 00		 mul	 QWORD PTR [rdi+152]
  00097	48 b8 00 91 10
	b6 02 00 00 00	 mov	 rax, 11644473600	; 00000002b6109100H
  000a1	48 c1 ea 17	 shr	 rdx, 23
  000a5	48 2b d0	 sub	 rdx, rax
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 244  : 	st = fileTimeToUnixTime(&response->ClientTime);

  000a8	48 89 94 24 b8
	00 00 00	 mov	 QWORD PTR st$[rsp], rdx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__gmtime64
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 245  : 	strftime(mbstr, sizeof(mbstr), "%Y-%m-%d %X", gmtime(&st));

  000b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@EHAPGNAC@?$CFY?9?$CFm?9?$CFd?5?$CFX@
  000bd	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  000c2	4c 8b c8	 mov	 r9, rax
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 245  : 	strftime(mbstr, sizeof(mbstr), "%Y-%m-%d %X", gmtime(&st));

  000c5	48 8d 4c 24 50	 lea	 rcx, QWORD PTR mbstr$[rsp]
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strftime

; 246  : 	p("Client request timestamp (UTC)  : %s\n", mbstr);

  000d0	48 8d 54 24 50	 lea	 rdx, QWORD PTR mbstr$[rsp]
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@CCLOIHMC@Client?5request?5timestamp?5?$CIUTC?$CJ?5@
  000dc	e8 00 00 00 00	 call	 logger

; 247  : 
; 248  : 	p("KMS host current active clients : %u\n", (uint32_t)LE32(response->Count));

  000e1	8b 97 a0 00 00
	00		 mov	 edx, DWORD PTR [rdi+160]
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@CKOEJNCP@KMS?5host?5current?5active?5clients@
  000ee	e8 00 00 00 00	 call	 logger

; 249  : 	p("Renewal interval policy         : %u\n", (uint32_t)LE32(response->VLRenewalInterval));

  000f3	8b 97 a8 00 00
	00		 mov	 edx, DWORD PTR [rdi+168]
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@HGDBGCN@Renewal?5interval?5policy?5?5?5?5?5?5?5?5@
  00100	e8 00 00 00 00	 call	 logger

; 250  : 	p("Activation interval policy      : %u\n", (uint32_t)LE32(response->VLActivationInterval));

  00105	8b 97 a4 00 00
	00		 mov	 edx, DWORD PTR [rdi+164]
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@EIDEKNCG@Activation?5interval?5policy?5?5?5?5?5@
  00112	e8 00 00 00 00	 call	 logger

; 251  : }

  00117	4c 8d 9c 24 90
	00 00 00	 lea	 r11, QWORD PTR [rsp+144]
  0011f	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  00123	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  00127	49 8b e3	 mov	 rsp, r11
  0012a	5f		 pop	 rdi
  0012b	c3		 ret	 0
logResponseVerbose ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Users\dev\source\repos\alpinevms\src\kms.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
; File C:\Users\dev\source\repos\alpinevms\src\kms.c
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
; File C:\Users\dev\source\repos\alpinevms\src\output.c
;	COMDAT logRequestVerbose
_TEXT	SEGMENT
guidBuffer$ = 48
mbstr$ = 96
WorkstationBuffer$ = 160
st$ = 384
Request$ = 384
p$dead$ = 392
productName$ = 392
ipstr$ = 400
logRequestVerbose PROC					; COMDAT

; 182  : {

$LN12:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 8d 6c 24 a0	 lea	 rbp, QWORD PTR [rsp-96]
  00012	48 81 ec 60 01
	00 00		 sub	 rsp, 352		; 00000160H

; 183  : 	char guidBuffer[GUID_STRING_LENGTH + 1];
; 184  : 	char WorkstationBuffer[3 * WORKSTATION_NAME_BUFFER];
; 185  : 	char *productName;
; 186  : 
; 187  : 	p("Protocol version                : %u.%u\n", LE16(Request->MajorVer), LE16(Request->MinorVer));

  00019	0f b7 51 02	 movzx	 edx, WORD PTR [rcx+2]
  0001d	49 8b f0	 mov	 rsi, r8
  00020	44 0f b7 01	 movzx	 r8d, WORD PTR [rcx]
  00024	48 8b f9	 mov	 rdi, rcx
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@KEHOAAGG@Protocol?5version?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  0002e	e8 00 00 00 00	 call	 logger

; 188  : 	p("Client is a virtual machine     : %s\n", LE32(Request->VMInfo) ? "Yes" : "No");

  00033	83 7f 04 00	 cmp	 DWORD PTR [rdi+4], 0
  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03CCLAEDDF@Yes@
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JINPPBEP@No@
  00045	48 0f 45 d0	 cmovne	 rdx, rax
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@CIJPHHEF@Client?5is?5a?5virtual?5machine?5?5?5?5@
  00050	e8 00 00 00 00	 call	 logger

; 189  : 	p("Licensing status                : %u (%s)\n", (uint32_t)LE32(Request->LicenseStatus), LE32(Request->LicenseStatus) < vlmcsd_countof(LicenseStatusText) ? LicenseStatusText[LE32(Request->LicenseStatus)] : "Unknown");

  00055	8b 57 08	 mov	 edx, DWORD PTR [rdi+8]
  00058	83 fa 07	 cmp	 edx, 7
  0005b	73 0d		 jae	 SHORT $LN4@logRequest
  0005d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:LicenseStatusText
  00064	4d 8b 04 d0	 mov	 r8, QWORD PTR [r8+rdx*8]
  00068	eb 07		 jmp	 SHORT $LN5@logRequest
$LN4@logRequest:
  0006a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07NBCGADJA@Unknown@
$LN5@logRequest:
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@NILKFNNP@Licensing?5status?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  00078	e8 00 00 00 00	 call	 logger

; 190  : 	p("Remaining time (0 = forever)    : %i minutes\n", (uint32_t)LE32(Request->BindingExpiration));

  0007d	8b 57 0c	 mov	 edx, DWORD PTR [rdi+12]
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@GGDJLANK@Remaining?5time?5?$CI0?5?$DN?5forever?$CJ?5?5?5@
  00087	e8 00 00 00 00	 call	 logger

; 191  : 
; 192  : 	uuid2StringLE(&Request->AppID, guidBuffer);

  0008c	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00091	48 8d 4f 10	 lea	 rcx, QWORD PTR [rdi+16]
  00095	e8 00 00 00 00	 call	 uuid2StringLE

; 193  : 	getProductIndex(&Request->AppID, KmsData->AppItemList, KmsData->AppItemCount, &productName, NULL);

  0009a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR KmsData
  000a1	4c 8d 8d 88 00
	00 00		 lea	 r9, QWORD PTR productName$[rbp-256]
  000a8	48 83 64 24 20
	00		 and	 QWORD PTR [rsp+32], 0
  000ae	48 8d 4f 10	 lea	 rcx, QWORD PTR [rdi+16]
  000b2	44 8b 42 0c	 mov	 r8d, DWORD PTR [rdx+12]
  000b6	48 8b 52 20	 mov	 rdx, QWORD PTR [rdx+32]
  000ba	e8 00 00 00 00	 call	 getProductIndex

; 194  : 	p("Application ID                  : %s (%s)\n", guidBuffer, productName);

  000bf	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR productName$[rbp-256]
  000c6	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  000cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@KHCLANPB@Application?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  000d2	e8 00 00 00 00	 call	 logger

; 195  : 
; 196  : 	uuid2StringLE(&Request->ActID, guidBuffer);

  000d7	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  000dc	48 8d 4f 20	 lea	 rcx, QWORD PTR [rdi+32]
  000e0	e8 00 00 00 00	 call	 uuid2StringLE

; 197  : 	getProductIndex(&Request->ActID, KmsData->SkuItemList, KmsData->SkuItemCount, &productName, NULL);

  000e5	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR KmsData
  000ec	4c 8d 8d 88 00
	00 00		 lea	 r9, QWORD PTR productName$[rbp-256]
  000f3	48 83 64 24 20
	00		 and	 QWORD PTR [rsp+32], 0
  000f9	48 8d 4f 20	 lea	 rcx, QWORD PTR [rdi+32]
  000fd	44 8b 42 14	 mov	 r8d, DWORD PTR [rdx+20]
  00101	48 8b 52 30	 mov	 rdx, QWORD PTR [rdx+48]
  00105	e8 00 00 00 00	 call	 getProductIndex

; 198  : 	p("SKU ID (aka Activation ID)      : %s (%s)\n", guidBuffer, productName);

  0010a	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR productName$[rbp-256]
  00111	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@LLNJLCF@SKU?5ID?5?$CIaka?5Activation?5ID?$CJ?5?5?5?5?5@
  0011d	e8 00 00 00 00	 call	 logger

; 199  : 
; 200  : 	uuid2StringLE(&Request->KMSID, guidBuffer);

  00122	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00127	48 8d 4f 30	 lea	 rcx, QWORD PTR [rdi+48]
  0012b	e8 00 00 00 00	 call	 uuid2StringLE

; 201  : 	getProductIndex(&Request->KMSID, KmsData->KmsItemList, KmsData->KmsItemCount, &productName, NULL);

  00130	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR KmsData
  00137	4c 8d 8d 88 00
	00 00		 lea	 r9, QWORD PTR productName$[rbp-256]
  0013e	48 83 64 24 20
	00		 and	 QWORD PTR [rsp+32], 0
  00144	48 8d 4f 30	 lea	 rcx, QWORD PTR [rdi+48]
  00148	44 8b 42 10	 mov	 r8d, DWORD PTR [rdx+16]
  0014c	48 8b 52 28	 mov	 rdx, QWORD PTR [rdx+40]
  00150	e8 00 00 00 00	 call	 getProductIndex

; 202  : 	p("KMS ID (aka KMS counted ID)     : %s (%s)\n", guidBuffer, productName);

  00155	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR productName$[rbp-256]
  0015c	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@MNFHGDHP@KMS?5ID?5?$CIaka?5KMS?5counted?5ID?$CJ?5?5?5?5@
  00168	e8 00 00 00 00	 call	 logger

; 203  : 
; 204  : 	uuid2StringLE(&Request->CMID, guidBuffer);

  0016d	48 8d 4f 40	 lea	 rcx, QWORD PTR [rdi+64]
  00171	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00176	e8 00 00 00 00	 call	 uuid2StringLE

; 205  : 	p("Client machine ID               : %s\n", guidBuffer);

  0017b	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00180	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@NAJADCGN@Client?5machine?5ID?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  00187	e8 00 00 00 00	 call	 logger

; 206  : 
; 207  : 	uuid2StringLE(&Request->CMID_prev, guidBuffer);

  0018c	48 8d 4f 5c	 lea	 rcx, QWORD PTR [rdi+92]
  00190	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  00195	e8 00 00 00 00	 call	 uuid2StringLE

; 208  : 	p("Previous client machine ID      : %s\n", guidBuffer);

  0019a	48 8d 54 24 30	 lea	 rdx, QWORD PTR guidBuffer$[rsp]
  0019f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@KNAHJFGH@Previous?5client?5machine?5ID?5?5?5?5?5@
  001a6	e8 00 00 00 00	 call	 logger
; File C:\Users\dev\source\repos\alpinevms\src\kms.c

; 164  : 	return GET_UA64LE(ts) / 10000000LL - 11644473600LL;

  001ab	48 b8 bd 42 7a
	e5 d5 94 bf d6	 mov	 rax, -2972493582642298179 ; d6bf94d5e57a42bdH
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  001b5	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR st$[rbp-256]
; File C:\Users\dev\source\repos\alpinevms\src\kms.c

; 164  : 	return GET_UA64LE(ts) / 10000000LL - 11644473600LL;

  001bc	48 f7 67 54	 mul	 QWORD PTR [rdi+84]
  001c0	48 b8 00 91 10
	b6 02 00 00 00	 mov	 rax, 11644473600	; 00000002b6109100H
  001ca	48 c1 ea 17	 shr	 rdx, 23
  001ce	48 2b d0	 sub	 rdx, rax
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 212  : 	st = fileTimeToUnixTime(&Request->ClientTime);

  001d1	48 89 95 80 00
	00 00		 mov	 QWORD PTR st$[rbp-256], rdx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  001d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__gmtime64
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 213  : 	strftime(mbstr, sizeof(mbstr), "%Y-%m-%d %X", gmtime(&st));

  001de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@EHAPGNAC@?$CFY?9?$CFm?9?$CFd?5?$CFX@
  001e5	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  001ea	4c 8b c8	 mov	 r9, rax
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 213  : 	strftime(mbstr, sizeof(mbstr), "%Y-%m-%d %X", gmtime(&st));

  001ed	48 8d 4c 24 60	 lea	 rcx, QWORD PTR mbstr$[rsp]
  001f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strftime

; 214  : 	p("Client request timestamp (UTC)  : %s\n", mbstr);

  001f8	48 8d 54 24 60	 lea	 rdx, QWORD PTR mbstr$[rsp]
  001fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@CCLOIHMC@Client?5request?5timestamp?5?$CIUTC?$CJ?5@
  00204	e8 00 00 00 00	 call	 logger

; 215  : 
; 216  : 	ucs2_to_utf8(Request->WorkstationName, WorkstationBuffer, WORKSTATION_NAME_BUFFER, sizeof(WorkstationBuffer));

  00209	48 8d 4f 6c	 lea	 rcx, QWORD PTR [rdi+108]
  0020d	41 b9 c0 00 00
	00		 mov	 r9d, 192		; 000000c0H
  00213	48 8d 55 a0	 lea	 rdx, QWORD PTR WorkstationBuffer$[rbp-256]
  00217	e8 00 00 00 00	 call	 ucs2_to_utf8

; 217  : 	if (strlen(ipstr))

  0021c	48 83 c8 ff	 or	 rax, -1
$LL10@logRequest:
  00220	48 ff c0	 inc	 rax
  00223	80 3c 06 00	 cmp	 BYTE PTR [rsi+rax], 0
  00227	75 f7		 jne	 SHORT $LL10@logRequest
  00229	48 85 c0	 test	 rax, rax
  0022c	74 0f		 je	 SHORT $LN2@logRequest

; 218  : 	{
; 219  : 		p("Client IP                       : %s\n", ipstr);

  0022e	48 8b d6	 mov	 rdx, rsi
  00231	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@DFLAPOPH@Client?5IP?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  00238	e8 00 00 00 00	 call	 logger
$LN2@logRequest:

; 220  : 	}
; 221  : 	p("Workstation name                : %s\n", WorkstationBuffer);

  0023d	48 8d 55 a0	 lea	 rdx, QWORD PTR WorkstationBuffer$[rbp-256]
  00241	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@NJMNAEGJ@Workstation?5name?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
  00248	e8 00 00 00 00	 call	 logger

; 222  : 	p("N count policy (minimum clients): %u\n", (uint32_t)LE32(Request->N_Policy));

  0024d	8b 57 50	 mov	 edx, DWORD PTR [rdi+80]
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@KONHMDAE@N?5count?5policy?5?$CIminimum?5clients@
  00257	e8 00 00 00 00	 call	 logger

; 223  : }

  0025c	48 8b 9c 24 90
	01 00 00	 mov	 rbx, QWORD PTR [rsp+400]
  00264	48 81 c4 60 01
	00 00		 add	 rsp, 352		; 00000160H
  0026b	5f		 pop	 rdi
  0026c	5e		 pop	 rsi
  0026d	5d		 pop	 rbp
  0026e	c3		 ret	 0
logRequestVerbose ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\output.c
;	COMDAT uuid2StringLE
_TEXT	SEGMENT
guid$ = 80
string$ = 88
uuid2StringLE PROC					; COMDAT

; 166  : {

$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 167  : 	sprintf(string,

  00004	4c 8b 51 08	 mov	 r10, QWORD PTR [rcx+8]
  00008	48 b8 ff ff ff
	ff ff ff 00 00	 mov	 rax, 281474976710655	; 0000ffffffffffffH
  00012	44 0f b7 49 04	 movzx	 r9d, WORD PTR [rcx+4]
  00017	4c 8b da	 mov	 r11, rdx
  0001a	49 0f ca	 bswap	 r10
  0001d	4c 23 d0	 and	 r10, rax
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LENFACPA@?$CF08x?9?$CF04x?9?$CF04x?9?$CF04x?9?$CF012I64x@
  00027	0f b7 41 08	 movzx	 eax, WORD PTR [rcx+8]
  0002b	66 c1 c8 08	 ror	 ax, 8
  0002f	44 0f b7 c0	 movzx	 r8d, ax
  00033	0f b7 41 06	 movzx	 eax, WORD PTR [rcx+6]
  00037	4c 89 54 24 30	 mov	 QWORD PTR [rsp+48], r10
  0003c	44 89 44 24 28	 mov	 DWORD PTR [rsp+40], r8d
  00041	44 8b 01	 mov	 r8d, DWORD PTR [rcx]
  00044	49 8b cb	 mov	 rcx, r11
  00047	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0004b	e8 00 00 00 00	 call	 sprintf

; 168  : #ifdef _WIN32
; 169  : 			"%08x-%04x-%04x-%04x-%012I64x",
; 170  : #else
; 171  : 			"%08x-%04x-%04x-%04x-%012llx",
; 172  : #endif
; 173  : 			(unsigned int)LE32(guid->Data1),
; 174  : 			(unsigned int)LE16(guid->Data2),
; 175  : 			(unsigned int)LE16(guid->Data3),
; 176  : 			(unsigned int)BE16(*(uint16_t *)guid->Data4),
; 177  : 			(unsigned long long)BE64(*(uint64_t *)(guid->Data4)) & 0xffffffffffffLL);
; 178  : }

  00050	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00054	c3		 ret	 0
uuid2StringLE ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
;	COMDAT gmtime
_TEXT	SEGMENT
_Time$ = 8
gmtime	PROC						; COMDAT

; 498  :             #pragma warning(push)
; 499  :             #pragma warning(disable: 4996)
; 500  :             return _gmtime64(_Time);

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__gmtime64
gmtime	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
;	COMDAT localtime
_TEXT	SEGMENT
_Time$ = 8
localtime PROC						; COMDAT

; 509  :             #pragma warning(push)
; 510  :             #pragma warning(disable: 4996)
; 511  :             return _localtime64(_Time);

  00000	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__localtime64
localtime ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
;	COMDAT time
_TEXT	SEGMENT
_Time$dead$ = 8
time	PROC						; COMDAT

; 535  :             return _time64(_Time);

  00000	33 c9		 xor	 ecx, ecx
  00002	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__time64
time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h
;	COMDAT vfprintf
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_ArgList$ = 80
vfprintf PROC						; COMDAT

; 652  : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	49 8b d8	 mov	 rbx, r8
  00012	48 8b fa	 mov	 rdi, rdx
  00015	48 8b f1	 mov	 rsi, rcx

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	45 33 c9	 xor	 r9d, r9d
  00020	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00025	4c 8b c7	 mov	 r8, rdi
  00028	48 8b d6	 mov	 rdx, rsi
  0002b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 653  :     return _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 654  : }

  00034	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00039	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  0003e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00042	5f		 pop	 rdi
  00043	c3		 ret	 0
vfprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h
;	COMDAT fprintf
_TEXT	SEGMENT
_Stream$ = 80
_Format$ = 88
fprintf	PROC						; COMDAT

; 831  : {

$LN6:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx
  00007	4c 89 40 18	 mov	 QWORD PTR [rax+24], r8
  0000b	4c 89 48 20	 mov	 QWORD PTR [rax+32], r9
  0000f	53		 push	 rbx
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00016	48 8b fa	 mov	 rdi, rdx

; 832  :     int _Result;
; 833  :     va_list _ArgList;
; 834  :     __crt_va_start(_ArgList, _Format);

  00019	48 8d 70 18	 lea	 rsi, QWORD PTR [rax+24]
  0001d	48 8b d9	 mov	 rbx, rcx

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00020	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00025	45 33 c9	 xor	 r9d, r9d
  00028	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0002d	4c 8b c7	 mov	 r8, rdi
  00030	48 8b d3	 mov	 rdx, rbx
  00033	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 835  :     _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 836  :     __crt_va_end(_ArgList);
; 837  :     return _Result;
; 838  : }

  0003c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00040	5f		 pop	 rdi
  00041	5e		 pop	 rsi
  00042	5b		 pop	 rbx
  00043	c3		 ret	 0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h
; File C:\Users\dev\source\repos\alpinevms\src\output.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h
; File C:\Users\dev\source\repos\alpinevms\src\output.c
;	COMDAT vlogger
_TEXT	SEGMENT
mbstr$ = 48
message$ = 2128
args$ = 2136
now$ = 2144
vlogger	PROC						; COMDAT

; 23   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 56		 push	 r14
  0000e	48 81 ec 30 08
	00 00		 sub	 rsp, 2096		; 00000830H

; 24   : 	FILE *log;
; 25   : 
; 26   : #ifdef _NTSERVICE
; 27   : 	if (!IsNTService && logstdout)

  00015	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR IsNTService, 0
  0001c	48 8b ea	 mov	 rbp, rdx
  0001f	4c 8b f1	 mov	 r14, rcx
  00022	75 19		 jne	 SHORT $LN2@vlogger
  00024	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR logstdout, 0
  0002b	74 10		 je	 SHORT $LN2@vlogger

; 28   : 		log = stdout;

  0002d	b9 01 00 00 00	 mov	 ecx, 1
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00038	48 8b f8	 mov	 rdi, rax
  0003b	eb 29		 jmp	 SHORT $LN5@vlogger
$LN2@vlogger:

; 29   : #else
; 30   : 	if (logstdout)
; 31   : 		log = stdout;
; 32   : #endif
; 33   : 	else
; 34   : 	{
; 35   : 		if (fn_log == NULL)

  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR fn_log
  00044	48 85 c9	 test	 rcx, rcx
  00047	0f 84 de 00 00
	00		 je	 $LN8@vlogger

; 36   : 			return;
; 37   : 
; 38   : #ifndef _WIN32
; 39   : 		if (!strcmp(fn_log, "syslog"))
; 40   : 		{
; 41   : 			openlog("vlmcsd", LOG_CONS | LOG_PID, LOG_USER);
; 42   : 
; 43   : 			////PORTABILITY: vsyslog is not in Posix but virtually all Unixes have it
; 44   : 			vsyslog(LOG_INFO, message, args);
; 45   : 
; 46   : 			closelog();
; 47   : 			return;
; 48   : 		}
; 49   : #endif // _WIN32
; 50   : 
; 51   : 		log = fopen(fn_log, "a");

  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01MCMALHOG@a@
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  0005a	48 8b f8	 mov	 rdi, rax

; 52   : 		if (!log)

  0005d	48 85 c0	 test	 rax, rax
  00060	0f 84 c5 00 00
	00		 je	 $LN8@vlogger
$LN5@vlogger:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00066	33 c9		 xor	 ecx, ecx
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 64   : 	if (LogDateAndTime)

  0006e	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR LogDateAndTime, 0
  00075	be 00 08 00 00	 mov	 esi, 2048		; 00000800H
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  0007a	48 89 84 24 60
	08 00 00	 mov	 QWORD PTR now$[rsp], rax
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 64   : 	if (LogDateAndTime)

  00082	74 27		 je	 SHORT $LN6@vlogger
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h

; 511  :             return _localtime64(_Time);

  00084	48 8d 8c 24 60
	08 00 00	 lea	 rcx, QWORD PTR now$[rsp]
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__localtime64
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 65   : 		strftime(mbstr, sizeof(mbstr), "%Y-%m-%d %X: ", localtime(&now));

  00092	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@LNENHMIM@?$CFY?9?$CFm?9?$CFd?5?$CFX?3?5@
  00099	8b d6		 mov	 edx, esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\time.h

; 511  :             return _localtime64(_Time);

  0009b	4c 8b c8	 mov	 r9, rax
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 65   : 		strftime(mbstr, sizeof(mbstr), "%Y-%m-%d %X: ", localtime(&now));

  0009e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR mbstr$[rsp]
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strftime
  000a9	eb 05		 jmp	 SHORT $LN7@vlogger
$LN6@vlogger:

; 66   : 	else
; 67   : 		*mbstr = 0;

  000ab	c6 44 24 30 00	 mov	 BYTE PTR mbstr$[rsp], 0
$LN7@vlogger:

; 68   : 
; 69   : #ifndef USE_THREADS
; 70   : 
; 71   : 	fprintf(log, "%s", mbstr);
; 72   : 	vfprintf(log, message, args);
; 73   : 	fflush(log);
; 74   : 
; 75   : #else // USE_THREADS
; 76   : 
; 77   : 	// We write everything to a string before we really log inside the critical section
; 78   : 	// so formatting the output can be concurrent
; 79   : 	int len = (int)strlen(mbstr);

  000b0	48 8d 4c 24 30	 lea	 rcx, QWORD PTR mbstr$[rsp]
  000b5	48 83 c8 ff	 or	 rax, -1
$LL18@vlogger:
  000b9	48 ff c0	 inc	 rax
  000bc	80 3c 01 00	 cmp	 BYTE PTR [rcx+rax], 0
  000c0	75 f7		 jne	 SHORT $LL18@vlogger

; 80   : 	// #	if !_MSC_VER
; 81   : 
; 82   : 	vlmcsd_vsnprintf(mbstr + len, sizeof(mbstr) - len, message, args);

  000c2	48 98		 cdqe
  000c4	48 8d 5c 24 30	 lea	 rbx, QWORD PTR mbstr$[rsp]
  000c9	48 2b f0	 sub	 rsi, rax
  000cc	48 03 d8	 add	 rbx, rax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  000cf	e8 00 00 00 00	 call	 __local_stdio_printf_options
  000d4	48 89 6c 24 28	 mov	 QWORD PTR [rsp+40], rbp
  000d9	4d 8b ce	 mov	 r9, r14
  000dc	48 83 64 24 20
	00		 and	 QWORD PTR [rsp+32], 0
  000e2	4c 8b c6	 mov	 r8, rsi
  000e5	48 8b d3	 mov	 rdx, rbx
  000e8	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000eb	48 83 c9 01	 or	 rcx, 1
  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
; File C:\Users\dev\source\repos\alpinevms\src\output.c

; 88   : 	fprintf(log, "%s", mbstr);

  000f5	4c 8d 44 24 30	 lea	 r8, QWORD PTR mbstr$[rsp]
  000fa	48 8b cf	 mov	 rcx, rdi
  000fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00104	e8 00 00 00 00	 call	 fprintf

; 89   : 	fflush(log);

  00109	48 8b cf	 mov	 rcx, rdi
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush

; 90   : 	unlock_mutex(&logmutex);
; 91   : 
; 92   : #endif // USE_THREADS
; 93   : 	if (log != stdout)

  00112	b9 01 00 00 00	 mov	 ecx, 1
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0011d	48 3b f8	 cmp	 rdi, rax
  00120	74 09		 je	 SHORT $LN8@vlogger

; 94   : 		fclose(log);

  00122	48 8b cf	 mov	 rcx, rdi
  00125	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN8@vlogger:

; 95   : }

  0012b	4c 8d 9c 24 30
	08 00 00	 lea	 r11, QWORD PTR [rsp+2096]
  00133	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  00137	49 8b 6b 28	 mov	 rbp, QWORD PTR [r11+40]
  0013b	49 8b e3	 mov	 rsp, r11
  0013e	41 5e		 pop	 r14
  00140	5f		 pop	 rdi
  00141	5e		 pop	 rsi
  00142	c3		 ret	 0
vlogger	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\output.c
;	COMDAT printPlatform
_TEXT	SEGMENT
printPlatform PROC					; COMDAT

; 256  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 257  : 	int testNumber = 0x1234;
; 258  : 
; 259  : #if _MSC_VER
; 260  : 	printf("Compiler: VC++ %02i.%02i build %i\n", _MSC_VER / 100, _MSC_VER % 100, _MSC_FULL_VER % 100000);

  00004	ba 13 00 00 00	 mov	 edx, 19
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@FAKKKCEM@Compiler?3?5VC?$CL?$CL?5?$CF02i?4?$CF02i?5build?5@
  00010	41 b9 64 7a 00
	00		 mov	 r9d, 31332		; 00007a64H
  00016	44 8d 42 0d	 lea	 r8d, QWORD PTR [rdx+13]
  0001a	e8 00 00 00 00	 call	 printf

; 261  : #elif defined(VLMCSD_COMPILER)
; 262  : 	printf(
; 263  : 		"Compiler: %s\n", VLMCSD_COMPILER
; 264  : #ifdef __VERSION__
; 265  : 		" " __VERSION__
; 266  : #endif // __VERSION__
; 267  : 	);
; 268  : #endif // VLMCSD_COMPILER
; 269  : 
; 270  : 	printf(

  0001f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@KEGGAHLA@little?9endian@
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@LFPGKPOF@?5Intel?5x86_64?5Windows64@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@MBJNOFCM@Intended?5platform?3?$CFs?5?$CFs?6@

; 271  : 		"Intended platform:%s %s\n", ""
; 272  : 
; 273  : #if __i386__ || _M_IX86
; 274  : 									 " Intel x86"
; 275  : #endif
; 276  : 
; 277  : #if __x86_64__ || __amd64__ || _M_X64 || _M_AMD64
; 278  : 									 " Intel x86_64"
; 279  : #endif
; 280  : 
; 281  : #if _M_ARM || __arm__
; 282  : 									 " ARM"
; 283  : #endif
; 284  : 
; 285  : #if __thumb__
; 286  : 									 " thumb"
; 287  : #endif
; 288  : 
; 289  : #if __aarch64__
; 290  : 									 " ARM64"
; 291  : #endif
; 292  : 
; 293  : #if __hppa__
; 294  : 									 " HP/PA RISC"
; 295  : #endif
; 296  : 
; 297  : #if __ia64__
; 298  : 									 " Intel Itanium"
; 299  : #endif
; 300  : 
; 301  : #if __mips__
; 302  : 									 " MIPS"
; 303  : #endif
; 304  : 
; 305  : #if defined(_MIPS_ARCH)
; 306  : 									 " " _MIPS_ARCH
; 307  : #endif
; 308  : 
; 309  : #if __mips16
; 310  : 									 " mips16"
; 311  : #endif
; 312  : 
; 313  : #if __mips_micromips
; 314  : 									 " micromips"
; 315  : #endif
; 316  : 
; 317  : #if __ppc__ || __powerpc__
; 318  : 									 " PowerPC"
; 319  : #endif
; 320  : 
; 321  : #if __powerpc64__ || __ppc64__
; 322  : 									 " PowerPC64"
; 323  : #endif
; 324  : 
; 325  : #if __sparc__
; 326  : 									 " SPARC"
; 327  : #endif
; 328  : 
; 329  : #if defined(__s390__) && !defined(__zarch__) && !defined(__s390x__)
; 330  : 									 " IBM S/390"
; 331  : #endif
; 332  : 
; 333  : #if __zarch__ || __s390x__
; 334  : 									 " IBM z/Arch (S/390x)"
; 335  : #endif
; 336  : 
; 337  : #if __m68k__
; 338  : 									 " Motorola 68k"
; 339  : #endif
; 340  : 
; 341  : #if __ANDROID__
; 342  : 									 " Android"
; 343  : #endif
; 344  : 
; 345  : #if __ANDROID_API__
; 346  : 									 " (API level " ANDROID_API_LEVEL ")"
; 347  : #endif
; 348  : 
; 349  : #if __FreeBSD__ || __FreeBSD_kernel__
; 350  : 									 " FreeBSD"
; 351  : #endif
; 352  : 
; 353  : #if __NetBSD__
; 354  : 									 " NetBSD"
; 355  : #endif
; 356  : 
; 357  : #if __OpenBSD__
; 358  : 									 " OpenBSD"
; 359  : #endif
; 360  : 
; 361  : #if __DragonFly__
; 362  : 									 " DragonFly BSD"
; 363  : #endif
; 364  : 
; 365  : #if defined(__CYGWIN__) && !defined(_WIN64)
; 366  : 									 " Cygwin32"
; 367  : #endif
; 368  : 
; 369  : #if defined(__CYGWIN__) && defined(_WIN64)
; 370  : 									 " Cygwin64"
; 371  : #endif
; 372  : 
; 373  : #if __GNU__
; 374  : 									 " GNU"
; 375  : #endif
; 376  : 
; 377  : #if __gnu_hurd__
; 378  : 									 " Hurd"
; 379  : #endif
; 380  : 
; 381  : #if __MACH__
; 382  : 									 " Mach"
; 383  : #endif
; 384  : 
; 385  : #if __linux__
; 386  : 									 " Linux"
; 387  : #endif
; 388  : 
; 389  : #if __APPLE__ && __MACH__
; 390  : 									 " Darwin"
; 391  : #endif
; 392  : 
; 393  : #if __minix__
; 394  : 									 " Minix"
; 395  : #endif
; 396  : 
; 397  : #if __QNX__
; 398  : 									 " QNX"
; 399  : #endif
; 400  : 
; 401  : #if __svr4__ || __SVR4
; 402  : 									 " SYSV R4"
; 403  : #endif
; 404  : 
; 405  : #if (defined(__sun__) || defined(sun) || defined(__sun)) && (defined(__SVR4) || defined(__svr4__))
; 406  : 									 " Solaris"
; 407  : #endif
; 408  : 
; 409  : #if (defined(__sun__) || defined(sun) || defined(__sun)) && !defined(__SVR4) && !defined(__svr4__)
; 410  : 									 " SunOS"
; 411  : #endif
; 412  : 
; 413  : #if defined(_WIN32) && !defined(_WIN64)
; 414  : 									 " Windows32"
; 415  : #endif
; 416  : 
; 417  : #if defined(_WIN32) && defined(_WIN64)
; 418  : 									 " Windows64"
; 419  : #endif
; 420  : 
; 421  : #if __MVS__ || __TOS_MVS__
; 422  : 									 " z/OS"
; 423  : #endif
; 424  : 
; 425  : #if defined(__GLIBC__) && !defined(__UCLIBC__)
; 426  : 									 " glibc"
; 427  : #endif
; 428  : 
; 429  : #if __UCLIBC__
; 430  : 									 " uclibc"
; 431  : #endif
; 432  : 
; 433  : #if defined(__linux__) && !defined(__GLIBC__) && !defined(__UCLIBC__) && !defined(__ANDROID__) && !defined(__BIONIC__)
; 434  : 									 " musl"
; 435  : #endif
; 436  : 
; 437  : 	// #		if _MIPSEL || __MIPSEL__ || __ARMEL__ || __THUMBEL__
; 438  : 	//		" little-endian"
; 439  : 	// #		endif
; 440  : 	//
; 441  : 	// #		if _MIPSEB || __MIPSEB__ || __ARMEB__ || __THUMBEB__
; 442  : 	//		" big-endian"
; 443  : 	// #		endif
; 444  : 
; 445  : #if __PIE__ || __pie__
; 446  : 									 " PIE"
; 447  : #endif
; 448  : 		,
; 449  : 		*((uint8_t *)&testNumber) == 0x34 ? "little-endian" : "big-endian");
; 450  : }

  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 261  : #elif defined(VLMCSD_COMPILER)
; 262  : 	printf(
; 263  : 		"Compiler: %s\n", VLMCSD_COMPILER
; 264  : #ifdef __VERSION__
; 265  : 		" " __VERSION__
; 266  : #endif // __VERSION__
; 267  : 	);
; 268  : #endif // VLMCSD_COMPILER
; 269  : 
; 270  : 	printf(

  00038	e9 00 00 00 00	 jmp	 printf
printPlatform ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\output.c
;	COMDAT printCommonFlags
_TEXT	SEGMENT
printCommonFlags PROC					; COMDAT

; 454  : 	printf(

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@NGPJLHEC@?5_CRYPTO_WINDOWS@
  00007	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NGBEHLG@Common?5flags?3?$CFs?6@
  0000e	e9 00 00 00 00	 jmp	 printf
printCommonFlags ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\output.c
;	COMDAT printClientFlags
_TEXT	SEGMENT
printClientFlags PROC					; COMDAT

; 521  : 	printf(

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@JPKAPDJG@?5DNS_PARSER?$DNOS@
  00007	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KMEDHNGP@vlmcs?5flags?3?$CFs?6@
  0000e	e9 00 00 00 00	 jmp	 printf
printClientFlags ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File C:\Users\dev\source\repos\alpinevms\src\output.c
;	COMDAT printServerFlags
_TEXT	SEGMENT
printServerFlags PROC					; COMDAT

; 544  : 	printf(

  00000	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@DNHMBJJK@?5NO_SIGHUP?5THREADS?$DN1?5SUPPORT_WI@
  00007	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGOEBGIP@vlmcsd?5flags?3?$CFs?6@
  0000e	e9 00 00 00 00	 jmp	 printf
printServerFlags ENDP
_TEXT	ENDS
END
